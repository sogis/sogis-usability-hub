buildscript {
    repositories {
        maven { url "https://jars.interlis.ch" }
        mavenCentral()
    }
}

plugins {
    id "ch.so.agi.interlis-repository-creator" version "1.3.26"
}

apply from: "$rootDir/gradle/versioning.gradle"

description = """SO!GIS UsabILIty Hub"""

def GROUP = "UsabILIty Hub creation"

import ch.so.agi.tasks.IlihubRepositoryCreator
import java.text.SimpleDateFormat

tasks.register('versionTxt') {
    group = GROUP
    description = "Create a version.txt file with some information about the build."
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: sogis-usabilityhub
"""
    }
}

tasks.register('createIliDataXml', IlihubRepositoryCreator) {
    group = GROUP
    description = "Create ilidata.xml file."
    reposDir = file("ilihub/")
    dataFile = "ilidata.xml"
}
createIliDataXml.configure { finalizedBy versionTxt }

/*
tasks.register('addXslDeclaration') {
    group = GROUP
    description = "Add XSL declaration to ilimodels.xml"
    doLast {
        def file = new File("ilimodels.xml")
        def content = file.text
        content = content.replaceAll("\\<\\?xml(.+?)\\?\\>", "").trim();
        content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<?xml-stylesheet type=\"text/xsl\" href=\"ilimodels.xsl\"?>\n" + content
        file.write content
    }
}    
*/

def DOCKER_ACCOUNT = "sogis"
def DOCKER_REPO = "usabilityhub"
def CONTAINER_NAME = "usabilityhub"

// only for testing
tasks.register('buildImage', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-f', 'Dockerfile',  '.'
}

tasks.register('startContainer', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'run', '-d', '--name', CONTAINER_NAME, '--rm', '-p8080:8080', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest"
     
    doLast { 	
        sleep(10000)
    }
}

tasks.register('stopContainer', Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'kill', CONTAINER_NAME
}

tasks.register('checkUsabilityHub') {
    group = GROUP
    description = "Check usability hub (very na√Øve approach)"
    doLast {
        def response = ["curl", "-i", "-v", "-X", "GET", "http://localhost:8080/ilidata.xml"].execute().text
        println(response)

        if (!response.contains("HTTP/2 200") && !response.contains("DatasetIdx16.DataIndex.DatasetMetadata")) {
            throw new GradleException()
        }
    }
}
checkUsabilityHub.finalizedBy stopContainer

// local dev: 'docker buildx create --use'
// gh action: handled by the pipeline
task buildAndPushImages(type: Exec) {
    def githash = getCheckedOutGitCommitHash()
    def buildTimestamp = getTimestamp()

    workingDir "$projectDir"
    commandLine 'docker', 'buildx', 'build',
                '--platform', 'linux/arm64,linux/amd64',
                '--no-cache', '--force-rm', '--push',
                '--label', "org.opencontainers.image.title=$project.description",
                '--label', "org.opencontainers.image.version=$version",
                '--label', "org.opencontainers.image.base.name=docker.io/nginx:mainline-alpine",
                '--label', "org.opencontainers.image.created=$buildTimestamp", 
                '--label', "org.opencontainers.image.revision=$githash",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version.major",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:"+version.major+"."+version.minor,
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version",
                '-f', 'Dockerfile',  '.'
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}
